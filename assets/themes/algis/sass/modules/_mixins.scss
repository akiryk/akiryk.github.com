/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

@mixin centered-content() {
  margin: 1em auto;
  padding: 0 1em;
}

@mixin vertical-list() {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
 * Layout mixins
 */

// The white panel that holds content and partially covers the hero image at top
@mixin main-content-wrapper() {
  margin-top: -8em;
  max-width: 36em;
}

 // The main content container. Sits inside of the main content wrapper (above)
@mixin content-on-white(){
  background-color: #fff;
  max-width: 36em;
  margin-left: auto;
  margin-right: auto;
}

// For small screens, pull post up over the image
@mixin up-and-over-image(){
  margin-top: -5em;
}

/* 
 * Sans mixins
 */

// Apply font styles as per http://css-tricks.com/snippets/css/better-helvetica/ 
@mixin sans(){
  font-family: $sans; 
}

// Uppercase labels (slugs, site title, etc)
@mixin uppercase-sans($context: $base-font-size) {
  @include sans();
  font-size: getEms(14, $context);
  font-weight: 500;
  text-transform: uppercase;
}

@mixin slug-normal($context: $base-font-size) {
  @include uppercase-sans($context);
  @include vendor(font-smoothing, antialiased);
  color: $red;
}

@mixin slug-light(){
  @include uppercase-sans($context: $base-font-size);
  color: $lighter-text;
}

// Lowercase sans-text (captions, brief teaser text, meta-data)
@mixin small-text($context: $base-font-size){
  @include sans();
  color: $lighter-text;
  font-size: getEms(14, $context);
}

@mixin white-shadow(){
  text-shadow: -1px 1px 0 #fff;
}
/*
 * simple way to make the h1 ... h6 font stack
 */
@mixin hfamily() {
    font-family: $headings;
}

// phase out in place of slug() above
@mixin slug-title($context: $base-font-size, $lighttext: false){
  font-family: $sans;
  font-size: getEms($caption-size, $context);
  margin-top: 0;
  margin-bottom: getEms(5, $caption-size);
  text-transform: uppercase;
  @if ($lighttext) {
    font-weight: 300;
    letter-spacing: 1px;
  } @else {
    font-weight: 500;
  }
}


/*
 * Create a css transition with vendor prefixes
 * 
 * Extend the compass mixin but make it easier
 * e.g. @include transition(width);
 * e.g. @include transition(width, .4s, ease-in);
 *
 */
@mixin transition($prop: all, $duration: 0.2s, $easing: null, $delay: null) {
  @include transition-property($prop);
  @include transition-duration($duration);

  @if ($easing != null) {
    @include transition-timing-function($easing); 
  }

  @if ($delay != null) {
    @include transition-delay($delay); 
  }
}
 

/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}


/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
$palm-end:              $lap-start - 0.01em;
$lap-end:               $desk-start - 0.01em;
$palm-small-end:        $palm-large-start - 0.01em;

@mixin media-query($media-query){

    @if $media-query == palm{

        @media only screen and (max-width:$palm-end) { @content; }

    }

     @if $media-query == palm-small{

        @media only screen and (max-width:$palm-small-end) { @content; }

    }

    @if $media-query == palm-large {

      @media only screen and (min-width:$palm-large-start) { @content; }
    }

    @if $media-query == lap{

        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }

    }

    @if $media-query == lap-and-up{

        @media only screen and (min-width:$lap-start) { @content; }

    }

    @if $media-query == portable{

        @media only screen and (max-width:$lap-end) { @content; }

    }

    @if $media-query == desk{

        @media only screen and (min-width:$desk-start) { @content; }

    }

    @if $media-query == desk-wide{

        @media only screen and (min-width: $desk-wide-start) { @content; }

    }

}