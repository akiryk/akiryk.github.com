/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/*
 * Basic cleanup for ordered and undered lists.
 */ 
@mixin clean-up-list() {
  list-style: none;
  margin: 0 auto;
  padding: 0;
}

/*
 * Common styles for images or text that pulls left or  pushes right
 */
@mixin push-or-pull(){
  margin-top: .5em;
  margin-bottom: 1em;
  width: 18em; // half of content width plus room for gutter
}

/*
 * Common styles for images or text that pull left
 */

@mixin pull-left(){
  @include push-or-pull();
  float: left;
  margin-left: -7.5em;
  margin-right: 2em;
}

@mixin pull-right() {
  @include push-or-pull();
  float: right;
  margin-right: -7.5em;
  margin-left: 2em;
}
/*
 * Create a clean vertical list.
 * Do this for things like lists of portfolio cards on a tag page,
 * blog items on a blog page, or menu items in dropdown navigation.
 * 
 */
@mixin vertical-list() {
  @include clean-up-list();
}

/*
 * Create a clean horizontal list.
 * 
 */
@mixin horizontal-list(){
  @include clean-up-list();
  >li {
    display: inline;
    padding-right: .5em;
    
    &:last-of-type {
      padding-right: 0;
    }

  }
}

/*
 * Set font-family for using typekit fonts
 * Use typekit classnames to handle styles while
 * fonts are still loading.
 */
@mixin typekit-font(){
  .wf-active {
    font-family: $headings;  
  }
  .wf-loading {
    visibility: hidden;
  }
}


/* 
 * Sans mixins, mainly for handling slugs
 */

// Apply font styles as per http://css-tricks.com/snippets/css/better-helvetica/ 
@mixin sans(){
  font-family: $sans-stack; 
}

// Uppercase labels (slugs, site title, etc)
@mixin uppercase-sans($context: $base-font-size) {
  @include sans();
  font-size: getEms(14, $context);
  font-weight: 500;
  text-transform: uppercase;
}

@mixin slug-normal($context: $base-font-size) {
  @include uppercase-sans($context);
  @include vendor(font-smoothing, antialiased);
  color: $red;
}

@mixin slug-light(){
  @include uppercase-sans($context: $base-font-size);
  color: $lighter-text;
}

// Lowercase sans-text (captions, brief teaser text, meta-data)
@mixin small-text($context: $base-font-size){
  @include sans();
  color: $lighter-text;
  font-size: getEms(14, $context);
}

/*
 * Create a css transition with vendor prefixes
 * 
 * Extend the compass mixin but make it easier
 * e.g. @include transition(width);
 * e.g. @include transition(width, .4s, ease-in);
 *
 */
@mixin transition($prop: all, $duration: 0.2s, $easing: null, $delay: null) {
  @include transition-property($prop);
  @include transition-duration($duration);

  @if ($easing != null) {
    @include transition-timing-function($easing); 
  }

  @if ($delay != null) {
    @include transition-delay($delay); 
  }
}
 

/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
$palm-end:              $lap-start - 0.01em;
$lap-end:               $desk-start - 0.01em;
$palm-small-end:        $palm-large-start - 0.01em;

@mixin media-query($media-query){

    @if $media-query == palm{

        @media only screen and (max-width:$palm-end) { @content; }

    }

     @if $media-query == palm-small{

        @media only screen and (max-width:$palm-small-end) { @content; }

    }

    @if $media-query == palm-large {

      @media only screen and (min-width:$palm-large-start) and (max-width: $palm-end) { @content; }
    }

    @if $media-query == lap{

        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }

    }

    @if $media-query == lap-and-up{

        @media only screen and (min-width:$lap-start) { @content; }

    }

    @if $media-query == portable{

        @media only screen and (max-width:$lap-end) { @content; }

    }

    @if $media-query == desk{

        @media only screen and (min-width:$desk-start) { @content; }

    }

    @if $media-query == desk-wide{

        @media only screen and (min-width: $desk-wide-start) { @content; }

    }

}